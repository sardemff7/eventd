<?xml version="1.0" encoding="UTF-8"?>
<protocol name="notification_area_v1">
    <copyright>
	Copyright © 2011-2016 Quentin "Sardem FF7" Glidic

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
    </copyright>

    <interface name="zww_notification_area_v1" version="1">
	<description summary="singleton for notification daemons">
	    The object is a singleton global.

	    This interface can only be bound once at the same time.
	    Any binding of this interface while already bound results
	    in a protocol error (bound).

	    This interface is intended for classic notification daemons which
	    display “bubbles”. These daemons are meant to be used in small
	    desktop environment or with highly-customizable compositors.
	    This interface must not be implemented where an integrated
	    notification system is desirable, like in complete desktop
	    environments as GNOME, KDE or EFL. Such an integrated

	    DE-independent daemons have an internal logic to place these
	    notifications on screen, which can be a really complex layout.
	    The compositor is in charge of providing a area for the
	    notification daemon to use. This is usually the screen area, minus
	    panels or other surfaces that should always be visible.
	    The compositor is also selecting the output to render notifications.


	    The geometry event informs the notification daemon of the available
	    area to display notifications.

	    The notification daemon can will create notifications using
	    the ww_notification_area.create_notification request, then move it
	    with the ww_notification.move request to achieve the desired layout.
	</description>

	<request name="destroy" type="destructor" />

	<enum name="error">
	    <description summary="ww_notification_area error values">
		These errors can be emitted in response to
		ww_notification_area requests.
	    </description>
	    <entry name="bound" value="0" summary="ww_notification_area is already bound"/>
	    <entry name="role" value="1" summary="given wl_surface has another role"/>
	</enum>

	<request name="create_notification">
	    <description summary="create a notification from a wl_surface">
		This gives the wl_surface the role of a notification.
		If the wl_surface already has another role, it raises
		a protocol error (role).

		See the ww_notification interface for details.
	    </description>
	    <arg name="id" type="new_id" interface="zww_notification_v1" />
	    <arg name="surface" type="object" interface="wl_surface" />
	</request>

	<event name="geometry">
	    <description summary="create a notification from a wl_surface">
		This event will be sent the geometry event whenever the work
		area changes. It will be sent at binding if the area is
		already known. If not, the notification daemon must assume
		an initial area of (0,0).

		A area of (0,0) means that no notification can be placed,
		and thus the compositor will simply not map the created surfaces
		if any. Notification daemons can e.g. delay notifications until
		the area is big enough to display them again.
	    </description>
	    <arg name="width" type="int" />
	    <arg name="height" type="int" />
	    <arg name="scale" type="int" />
	</event>
    </interface>

    <interface name="zww_notification_v1" version="1">
	<description summary="a notification bubble">
	    This interface represents a notification bubble.

	    A notification should not be restricted as a normal window,
	    and be placed on top of all other surfaces, so that
	    the user will see it clearly.
	</description>

	<enum name="error">
	    <description summary="ww_notification error values">
		These errors can be emitted in response to ww_notification requests.
	    </description>
	    <entry name="outside_area" value="0" summary="notification would be rendered outside the area"/>
	</enum>

	<request name="destroy" type="destructor" />

	<request name="move">
	    <description summary="create a notification from a wl_surface">
		This request moves a notification inside the area.
		Coordinates map the top-left corner of the notification from
		the top-left corner of the area.

		Notifications must fit in the area, otherwise
		a protocol error (outside-area) is sent.
	    </description>
	    <arg name="x" type="int" summary="x coordinate, area-relative" />
	    <arg name="y" type="int" summary="y coordinate, area-relative" />
	</request>
    </interface>
</protocol>
