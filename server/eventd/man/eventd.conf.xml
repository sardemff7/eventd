<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % config SYSTEM "config.ent">
%config;
]>

<!--
  eventd - Small daemon to act on remote or local events

  Copyright © 2011-2017 Quentin "Sardem FF7" Glidic

  This file is part of eventd.

  eventd is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  eventd is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with eventd. If not, see <http://www.gnu.org/licenses/>.
-->

<refentry xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    id="eventd.conf">
    <xi:include href="common-man.xml" xpointer="refentryinfo" />

    <refmeta>
        <refentrytitle>eventd.conf</refentrytitle>
        <manvolnum>5</manvolnum>
    </refmeta>

    <refnamediv>
        <refname>eventd.conf</refname>
        <refpurpose>eventd main configuration file</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
        <para>eventd is using three differente types of configuration files: global, event and action files.</para>
        <para>The files are searched in these directories in the following order:</para>
        <orderedlist>
            <listitem><para><filename id="default-events-dir" class="directory">/usr/share/&PACKAGE_NAME;</filename></para></listitem>
            <listitem><para>In user mode (the default): <phrase id="home-events-dir"><filename class="directory"><varname>$XDG_CONFIG_HOME</varname>/&PACKAGE_NAME;</filename> (fallback to <filename>~/.config/&PACKAGE_NAME;/</filename>)</phrase></para></listitem>
            <listitem><para>In system mode: <filename class="directory">/etc/&PACKAGE_NAME;</filename></para></listitem>
            <listitem><para><filename class="directory"><varname>$EVENTD_CONFIG_DIR</varname></filename> (see <citerefentry><refentrytitle>eventd</refentrytitle><manvolnum>1</manvolnum></citerefentry>)</para></listitem>
            <listitem><para>Directory passed with <filename class="directory"><option>--config-dir</option></filename> (see <citerefentry><refentrytitle>eventd</refentrytitle><manvolnum>1</manvolnum></citerefentry>)</para></listitem>
        </orderedlist>
        <para>
            These paths are standard paths. Actual paths may depend on your configuration, see <command>eventd <option>-P</option></command> output.
        </para>

        <refsect2>
            <title>Global configuration file</title>

            <para>The global configuration file is named <filename>&PACKAGE_NAME;.conf</filename>.</para>
            <para>Each file found in the configuration directories is parsed one after the other, so the latest file can override settings in a preceding one.</para>
        </refsect2>

        <refsect2>
            <title>Event and action files</title>

            <para>The event and action files can be extended via a configuration key (see <xref linkend="event-action-sections" />).</para>
            <para>If the same file is found in several places, the last one is used.</para>
            <para>File concatenation is done after each directory was searched for files, so you can override them.</para>
            <para>eventd will also walk through subdirectories, to let you organize your events.</para>
        </refsect2>

        <para>
            <emphasis>An event file is <emphasis>mandatory</emphasis> for the event to be processed by eventd.</emphasis>
        </para>
    </refsynopsisdiv>

    <refsect1 id="description">
        <title>Description</title>

        <para>
            eventd configuration files use a <code><replaceable>Key</replaceable>=<replaceable>Value</replaceable></code> syntax, organized in categories.
            Categories are specified using square brackets (e.g. <code>[<replaceable>Category Name</replaceable>]</code>).
            List values are semi-colon-separated (<literal>';'</literal>).
            More details are available in the <ulink url="http://standards.freedesktop.org/desktop-entry-spec/latest/">XDG Desktop Entry Specification</ulink>.
        </para>

        <refsect2>
            <title>Global configuration file</title>

            <para>This file is passed to every plugin so they can read their global configuration too.</para>
            <para>Sections read in these files are identified as “Global sections”.</para>
        </refsect2>

        <refsect2>
            <title>Event files</title>

            <para>Event files describes the events that the daemon will recognise when an event collection plugin will push it.</para>
            <para>These files are only ever read by eventd itself.</para>
            <para>They define a list of action ids that eventd (and its plugins) should trigger when a matching event fires up.</para>
            <para>Unknown action ids are silently ignored. If an event ends with an empty action list, it is discarded.</para>
            <para>Sections read in these files are identified as “Event sections”.</para>
        </refsect2>

        <refsect2>
            <title>Action files</title>

            <para>
                Action files describes the actions that the plugins may do when dispatching an event.
                Each action can itself trigger subactions.
            </para>
            <para>eventd itself reads very little information in there, but plugins can read as much as they want to determine their exact behaviour when the action is triggered.</para>
            <para>Official action plugins <emphasis>require</emphasis> at least their own configuration section to do something. They have no “catch-all” action.</para>
            <para>Sections read in these files are identified as “Action sections”.</para>
        </refsect2>
    </refsect1>

    <refsect1 id="configuration-key-types">
        <title>Configuration key types</title>

        <para>Each key can be of a specified type. Basic types are <type>integer</type>, <type>boolean</type> or <type>string</type>, sometimes constrained like <type>milliseconds</type> or <type>percentage</type>.</para>
        <para>For positives numeric types, <literal>-1</literal> may be allowed to mean <literal>infinity</literal>.</para>
        <para>For strings, a localised version may be used and will be indicated as such.</para>
        <para>For lists, items are separated by a semicolon (<literal>';'</literal>). You can optionally end the list with a semicolon too.</para>

        <refsect2>
            <title>Enumeration</title>

            <para>An <type>enumeration</type> is a <type>string</type> which can take a limited set of values. Values are case-insensitive.</para>
            <para>Accepted values depend on the key and will be listed in the relevant key descriptions.</para>
        </refsect2>

        <refsect2>
            <title>Format strings</title>

            <para>A <type>format string</type> can contain references to event data.</para>

            <xi:include href="libnkutils-man.xml" xpointer="xpointer(id('nk-token-reference-description')/*)" />

            <para>Please note that the config file format uses the backslash (\) for escaping sequences. Therefore, you will have to escape it if it is needed in your format string (e.g. to uses backreferences in the replacement part of the regex syntax).</para>
        </refsect2>

        <refsect2>
            <title>File URI</title>

            <para>A <type>file URI</type> is a string that can be either a <type>data name</type> or a <type>format string</type> of an URI scheme.</para>
            <para>In the former case, the data is searched in the event, and then either parsed as an URI or used directly if it is a GVariant of type <type>"(msmsay)"</type> containing the MIME type, the charset, and the data.</para>
            <para>Three URI schemes are supported: <literal>file://</literal> <literal>theme:</literal> and <literal>data:</literal> (<ulink url="https://en.wikipedia.org/wiki/Base64">Base64</ulink> extension only, charset and mime type may be ignored).</para>
            <para>A <literal>theme:</literal> URI is has the form <userinput>theme:<optional><replaceable>theme-name</replaceable>/</optional><replaceable>item-name</replaceable></userinput>.</para>
        </refsect2>

        <xi:include href="libnkutils-man.xml" xpointer="nk-colour-type-description" />

        <refsect2>
            <title>Other types</title>

            <para>More specific types are described in the relevant key description.</para>
        </refsect2>
    </refsect1>

    <refsect1 id="configuration-ids-and-event-matching">
        <title>Configuration ids and event matching</title>

        <para>
            When eventd receive an event from one of its event collecting plugin, it searches the best match, using the following mechanism:
        </para>

        <orderedlist numeration="arabic" inheritnum="inherit">
            <listitem>
                <para>event will first try to get a list of possible matches basde on event’s category and name:</para>
                <orderedlist numeration="loweralpha">
                    <listitem><para>eventd will get the list of matches for both the category and the name of the event</para></listitem>
                    <listitem><para>If the list is empty, eventd will get the list matches for the category the event</para></listitem>
                    <listitem><para>If the list is still empty, the event is unknown and will not be dispatched.</para></listitem>
                </orderedlist>
            </listitem>
            <listitem>
                <para>event will then test all possible matches to find the best one.</para>
                <para>If one of them matches, trigger its actions, otherwise continue</para>
                <para>If none of them matches, the event is unknown and will not be dispatched.</para>
            </listitem>
        </orderedlist>

        <para>
            Multiple events can match the name and the category. eventd provides a fine-grained matching mechanism. Several keys are dedicated to that.
            See <xref linkend="event-matching-keys" />.
        </para>
    </refsect1>

    <refsect1 id="global-sections">
        <title>Global sections</title>

        <refsect2>
            <title>Section <varname>[Server]</varname></title>

            <variablelist>
                <varlistentry>
                    <term><varname>TLSCertificate=</varname></term>
                    <listitem>
                        <para>A <type>file name</type></para>
                        <para>The path to the TLS certificate file.</para>
                        <para>This certificate will also be used as the client certificate for the relay.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>TLSKey=</varname></term>
                    <listitem>
                        <para>A <type>file name</type></para>
                        <para>The path to the TLS private key file.</para>
                        <para>If not specified, the certificate file is expected to contain the key.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>TLSClientCertificates=</varname></term>
                    <listitem>
                        <para>A <type>file name</type></para>
                        <para>The path to a file containing a list of certificates.</para>
                        <para>When a client connects, a certificate will be required, and checked for matching against this list.</para>
                        <para>No identity or CA check is done.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>PublishName=</varname></term>
                    <listitem>
                        <para>A <type>string</type></para>
                        <para>The name that the server will publish using DNS-SD.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>GnuTLSPriority=</varname></term>
                    <listitem>
                        <para>A <type>string</type></para>
                        <para>A convenience key to set the <varname>$G_TLS_GNUTLS_PRIORITY</varname> environment variable.</para>
                        <para><emphasis>It will not override the environment variable if it is present when you run eventd.</emphasis></para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>

        <refsect2>
            <title>Section <varname>[Relay]</varname></title>

            <variablelist>
                <varlistentry>
                    <term><varname>Servers=</varname></term>
                    <listitem>
                        <para>A <type>list of names</type></para>
                        <para>A list of names that will be used to discover <varname>[Relay <replaceable>name</replaceable>]</varname> sections.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>

        <refsect2>
            <title>Section <varname>[Relay <replaceable>name</replaceable>]</varname></title>

            <variablelist>
                <varlistentry>
                    <term><varname>URI=</varname></term>
                    <listitem>
                        <para>An <type>URI</type></para>
                        <para>Several schemes are supported.</para>
                        <variablelist>
                            <varlistentry>
                                <term>evp://<replaceable>hostname</replaceable><optional>:<replaceable>port</replaceable></optional></term>
                                <listitem>
                                    <para>Use the Event protocol over TCP. TLS is used (and mandatory) if not connecting to localhost.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry condition="website;ev_os_unix">
                                <term>unix:@<replaceable>abstract-name</replaceable></term>
                                <term>unix:<replaceable>path</replaceable></term>
                                <listitem>
                                    <para>Use the Event protocol over an UNIX stream socket.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>file://<replaceable>path</replaceable></term>
                                <listitem>
                                    <para>Use the Event protocol over TCP on localhost using a random port. The port is expected to be written in the file pointed by <replaceable>path</replaceable>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>ws<optional>s</optional>://<replaceable>uri</replaceable></term>
                                <listitem>
                                    <para>Use the Event protocol over WebSocket. TLS is used if using the <literal>wss://</literal> scheme.</para>
                                    <para>Please note that connecting directly to eventd on a non-loopback interface requires TLS.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <para>If you omit <replaceable>port</replaceable> or use <literal>0</literal>, the SRV DNS record <literal>&EVP_SERVICE_TYPE;.<replaceable>host</replaceable></literal> will be used to find the real host and port to connect to.</para>
                        <para>Static servers eventd will connect to.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>DiscoverName=</varname></term>
                    <listitem>
                        <para>A <type>service name</type></para>
                        <para>eventd will monitor this name with discovery services and then connect to it.</para>
                        <para>If you provide both <varname>Server=</varname> and <varname>DiscoverName=</varname>, the former is ignored.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>PingInterval=</varname> (defaults to <literal>300</literal>)</term>
                    <listitem>
                        <para>A time in <type>seconds</type> (<literal>0</literal> to disable)</para>
                        <para>The interval at which eventd will send a PING message to the remote server.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>ServerIdentity=</varname></term>
                    <listitem>
                        <para>A <type>server name</type></para>
                        <para>Server identity to check for in TLS certificate.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>AcceptUnknownCA=</varname></term>
                    <listitem>
                        <para>A <type>boolean</type></para>
                        <para>Whether to accept a certificate with an unknown CA (like a self-signed certificate).</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>Forwards=</varname></term>
                    <listitem>
                        <para>A <type>list of event categories</type></para>
                        <para>The list of event categories the plugin will forward.</para>
                        <para>If empty (but present), will forward everything.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>Subscriptions=</varname></term>
                    <listitem>
                        <para>A <type>list of event categories</type></para>
                        <para>The list of event categories the plugin will subscribe to.</para>
                        <para>If empty (but present), will subscribe to everything.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
    </refsect1>

    <refsect1 id="event-action-sections">
        <title>Event and action sections</title>

        <refsect2>
            <title>Section <varname>[File]</varname></title>

            <para>
                This section if for file inclusion.
                It allows a more customised management of your files.
            </para>

            <variablelist>
                <varlistentry>
                    <term><varname>Extends=</varname></term>
                    <listitem>
                        <para>A <type>file name</type></para>
                        <para>Prepend the specified file to this one.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
    </refsect1>

    <refsect1 id="event-sections">
        <title>Event sections</title>

        <refsect2>
            <title>Section <varname>[Event <replaceable>category</replaceable> <optional><replaceable>name</replaceable> <optional><replaceable>sub-name</replaceable></optional></optional>]</varname></title>

            <para>
                This is the main event configuration section.
                It contains the core related settings.
            </para>
            <para>
                The <replaceable>category</replaceable> and <replaceable>name</replaceable> are used to match the event while <replaceable>sub-name</replaceable> is only meant to differentiate sections and is not used anywhere in eventd.
            </para>
            <para>
                You can use an empty <replaceable>name</replaceable> to have data matches on a whole category.
                This means the <replaceable>category</replaceable> and the <replaceable>sub-name</replaceable> will be separated with two spaces.
            </para>

            <refsect3 id="event-matching-keys">
                <title>Matching keys</title>

                <variablelist>
                    <varlistentry>
                        <term><varname>IfData=</varname></term>
                        <listitem>
                            <para>A <type>list of data names</type></para>
                            <para>All data listed here must exist for this event id to match.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>IfDataMatches=</varname></term>
                        <listitem>
                            <para>A <type>list of <type>(data name,operator,value)</type> tuples</type></para>
                            <para>If the named data is present, it must compare as expected with the provided value. All present data must match for this event id to match.</para>
                            <para>Supported operators are <literal>==</literal>, <literal>!=</literal>, <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>&gt;</literal> and <literal>&gt;=</literal>.</para>
                            <para><replaceable>value</replaceable> is parsed as a GVariant (e.g. strings must be quoted), and the type must match exactly, so be sure to include it if necessary.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>IfDataRegex=</varname></term>
                        <listitem>
                            <para>A <type>list of <type>(data name,regex)</type> tuples</type></para>
                            <para>If the named data is present, it must match the provided regex. All present data must match for this event id to match.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>OnlyIfFlags=</varname></term>
                        <listitem>
                            <para>A <type>list of flag names</type></para>
                            <para>eventd will only dispatch an event if all of these flags are present.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>NotIfFlags=</varname></term>
                        <listitem>
                            <para>A <type>list of flag names</type></para>
                            <para>eventd will only dispatch an event if none of these flags is present.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>Importance=</varname> (defaults to <phrase id="default-importance-nomatch"><literal>9223372036854775807</literal></phrase> or <phrase id="default-importance-match"><literal>0</literal></phrase>, see below)</term>
                        <listitem>
                            <para>An <type>integer</type> (can be negative)</para>
                            <para>The less you put here, the more important this event configuration is. It allows you to order alternative configurations, as the first matching configuration is taken.</para>
                            <para>If you only have <varname>Category</varname> and/or <varname>Name</varname> keys, the default value is <xi:include xpointer="xpointer(id('default-importance-nomatch')/literal)" />.</para>
                            <para>If you have more precise matching keys, the default value is then <xi:include xpointer="xpointer(id('default-importance-match')/literal)" />.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </refsect3>

            <refsect3>
                <title>Event configuration keys</title>

                <variablelist>
                    <varlistentry>
                        <term><varname>Disable=</varname></term>
                        <listitem>
                            <para>A <type>boolean</type></para>
                            <para>If <literal>true</literal>, the event is not dispatched.</para>
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><varname>Actions=</varname></term>
                        <listitem>
                            <para>A <type>list of action names</type></para>
                            <para>The list of actions to trigger when the event fires up.</para>
                            <para>See <xref linkend="action-sections" />.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </refsect3>
        </refsect2>
    </refsect1>

    <refsect1 id="action-sections">
        <title>Action sections</title>

        <refsect2>
            <title>Section <varname>[Action]</varname></title>

            <para>
                This section allows to identify the action uniquely and link it to subactions if wanted.
            </para>

            <variablelist>
                <varlistentry>
                    <term><varname>Name=</varname></term>
                    <listitem>
                        <para>An <type>action name</type></para>
                        <para>This name can be used in the <varname>Subactions=</varname> key of this section or the <varname>Actions=</varname> key of the <varname>[Event]</varname> section.</para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><varname>Subactions=</varname></term>
                    <listitem>
                        <para>A <type>list of action names</type></para>
                        <para>The list of sub actions to trigger.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
    </refsect1>

    <xi:include href="common-man.xml" xpointer="see-also" />
</refentry>
