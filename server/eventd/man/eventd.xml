<?xml version='1.0' ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % config SYSTEM "config.ent">
%config;
]>

<!--
  eventd - Small daemon to act on remote or local events

  Copyright Â© 2011-2012 Quentin "Sardem FF7" Glidic

  This file is part of eventd.

  eventd is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  eventd is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with eventd. If not, see <http://www.gnu.org/licenses/>.
-->

<refentry xmlns:xi="http://www.w3.org/2001/XInclude"
    id="eventd">
    <xi:include href="common-man.xml" xpointer="refentryinfo" />

    <refmeta>
        <refentrytitle>eventd</refentrytitle>
        <manvolnum>1</manvolnum>
    </refmeta>

    <refnamediv>
        <refname>eventd</refname>
        <refpurpose>small daemon to act on remote or local events</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
        <cmdsynopsis>
            <command>eventd</command>
            <arg choice="opt" rep="repeat">OPTIONS</arg>
        </cmdsynopsis>
    </refsynopsisdiv>

    <refsect1 id="description">
        <title>Description</title>

        <para>
            eventd is a simple daemon to track remote or local events and do actions the user wants to.
        </para>
        <para>
            eventd is composed by a core, the daemon itself, and various plugins.
            Plugins may be event collecting plugins or action plugins.
        </para>
    </refsect1>

    <refsect1 id="events">
        <title>Events</title>

        <para>
            The core daemon will not dispatch unknown events to action plugins.
            Default events are distributed with eventd in
            <xi:include href="eventd.event.xml" xpointer="default-events-dir" />.
        </para>
        <para>
            Official actions plugins will require at least a section in the matching event file to act on a specific event.
            Third party plugin are advised to do the same for consistency.
        </para>
        <para>
            See <citerefentry><refentrytitle>eventd.event</refentrytitle><manvolnum>5</manvolnum></citerefentry> for detailed information.
        </para>
    </refsect1>

    <refsect1 id="plugins">
        <title>Plugins</title>

        <para>When eventd starts, it loads all the available plugins found in the following directories:</para>
        <orderedlist>
            <listitem><para><filename>&libdir;/&PACKAGE_NAME;</filename></para></listitem>
            <listitem><para><filename>&datadir;/&PACKAGE_NAME;</filename></para></listitem>
            <listitem><para><filename><varname>$XDG_DATA_HOME</varname>/&PACKAGE_NAME;</filename> (fallback to <filename>~/.local/share/&PACKAGE_NAME;</filename>)</para></listitem>
            <listitem><para><filename><varname>$EVENTD_PLUGINS_DIR</varname></filename> (see <xref linkend="environment" />)</para></listitem>
        </orderedlist>

        <refsect2>
            <title>Event collection plugins</title>

            <para>An event collection plugin will listen to clients and queue events in eventd.</para>

            <para>The following event collection plugins are <phrase condition="website">distributed</phrase><phrase condition="installation">installed</phrase> with eventd:</para>
            <variablelist>
                <varlistentry>
                    <term><command>evp</command> (see <citerefentry><refentrytitle>eventd-evp</refentrytitle><manvolnum>1</manvolnum></citerefentry>)</term>
                    <listitem><para>which implements our own EVENT protocol</para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><command>fdo-notifications</command> (see <citerefentry><refentrytitle>eventd-fdo-notifications</refentrytitle><manvolnum>1</manvolnum></citerefentry>)</term>
                    <listitem><para>which implements the <ulink url="http://people.gnome.org/~mccann/docs/notification-spec/notification-spec-latest.html">Desktop Notifications Specification</ulink></para></listitem>
                </varlistentry>
            </variablelist>
        </refsect2>

        <refsect2>
            <title>Action plugins</title>

            <para>An action plugin will do something when an event is dispatched by eventd.</para>

            <para>The following action plugins are <phrase condition="website">distributed</phrase><phrase condition="installation">installed</phrase> with eventd:</para>
            <variablelist>
                <varlistentry>
                    <term><command>relay</command> (see <citerefentry><refentrytitle>eventd-relay.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>a relay plugin, to relay events to remote eventd</para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><command>exec</command> (see <citerefentry><refentrytitle>eventd-exec.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>a simple exec plugin, to exec arbitrary commands</para></listitem>
                </varlistentry>

                <varlistentry condition="website;enable_notification_daemon">
                    <term><command>nd</command> (see <citerefentry><refentrytitle>eventd-nd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> and <citerefentry><refentrytitle>eventd-nd.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>a notification plugin, aka "bubble" plugin</para></listitem>
                </varlistentry>

                <varlistentry condition="website;enable_im">
                    <term><command>im</command> (see <citerefentry><refentrytitle>eventd-im.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> and <citerefentry><refentrytitle>eventd-im.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>an IM plugin</para></listitem>
                </varlistentry>

                <varlistentry condition="website;enable_sound">
                    <term><command>sound</command> (see <citerefentry><refentrytitle>eventd-sound.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>a sound file playing plugin</para></listitem>
                </varlistentry>

                <varlistentry condition="website;enable_tts">
                    <term><command>tts</command> (see <citerefentry><refentrytitle>eventd-tts.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>a Text-to-Speech plugin</para></listitem>
                </varlistentry>

                <varlistentry condition="website;enable_notify">
                    <term><command>notify</command> (see <citerefentry><refentrytitle>eventd-notify.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>)</term>
                    <listitem><para>a libnotify client plugin</para></listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
    </refsect1>

    <refsect1 id="options">
        <title>Options</title>

        <variablelist>
            <varlistentry>
                <term><option>-t</option></term>
                <term><option>--take-over</option></term>
                <listitem>
                    <para>Take over socket</para>
                    <para>If possible, will take the sockets from an already running eventd.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><option>-i</option></term>
                <term><option>--private-socket=<replaceable class="parameter">socket</replaceable></option></term>
                <listitem>
                    <para>Socket to listen for internal control</para>
                    <para>See <citerefentry><refentrytitle>eventdctl</refentrytitle><manvolnum>1</manvolnum></citerefentry></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><option>-V</option></term>
                <term><option>--version</option></term>
                <listitem>
                    <para>Print version</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><option>-h</option></term>
                <term><option>--help</option></term>
                <listitem>
                    <para>Show help options</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>

    <refsect1 id="exit-status">
        <title>Exit status</title>

        <variablelist>
            <varlistentry>
                <term><literal>0</literal></term>
                <listitem>
                    <para><command>eventd</command> ended successfully.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>1</literal></term>
                <listitem>
                    <para>Failed to parse command line paramaters.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>2</literal></term>
                <listitem>
                    <para>Filesystem is not UTF-8 encoded.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>10</literal></term>
                <listitem>
                    <para>Failed to start the control interface.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>

    <refsect1 id="examples">
        <title>Examples</title>

        <example condition="website;enable_xcb">
            <title>As a notification daemon</title>

            <para>
                With its <command>fdo-notifications</command> plugin and <command>nd</command> plugin with <command>xcb</command> backend, eventd can act as a notification daemon.
                The generated notifications looks a lot like notify-osdâs ones.
            </para>
            <para>
                This feature should work automagically using D-Bus on-demand spawning.
            </para>
            <para>
                If you use several X displays or launch your session D-Bus daemon manually, you should add the following line to your <filename>~/.xsession</filename> or equivalent file:
            </para>
            <programlisting>eventdctl --auto-spawn notification-daemon attach ${DISPLAY}</programlisting>
            <para>
                See <citerefentry><refentrytitle>eventdctl</refentrytitle><manvolnum>1</manvolnum></citerefentry> for <command>eventdctl</command> call precisions.
            </para>
        </example>

        <example>
            <title>Custom event: notify the end of a command</title>

            <para>
                Here is a complete example of a custom event.
                Please refer to the relevant man page for further information.
            </para>
            <para>
                We will use three files: one for the category <literal>"command"</literal> and one for each event, <literal>"success"</literal> and <literal>"failure"</literal>.
                These files will be placed in <xi:include href="eventd.event.xml" xpointer="home-events-dir" />.
                Here is their contents:
            </para>
            <programlisting><literal>"<filename>command.event</filename>"</literal>:
    [Event]
    Category=command

    [Relay]
    Server=myothercomputer.local<phrase condition="website;enable_notification_daemon;enable_sound;enable_canberra;enable_libnotify">

<literal>"<filename>command-success.event</filename>"</literal>;
    [Event]
    Extends=command.event
    Name=success<phrase condition="website;enable_notification_daemon">

    [Notification]
    Title=${command} succeeded
    Message=${time}</phrase><phrase condition="website;enable_sound">

    [Sound]
    File=file://command-success.ogg</phrase><phrase condition="website;enable_notify">

    [Libnotify]
    Title=${command} succeeded
    Message=${time}</phrase><phrase condition="website;enable_canberra">

    [Libcanberra]
    Name=command-success</phrase>

<literal>"<filename>command-failure.event</filename>"</literal>;
    [Event]
    Extends=command.event
    Name=failure<phrase condition="website;enable_notification_daemon">

    [Notification]
    Title=${command} failed
    Message=${time}

    [NotificationBubble]
    Colour=#ff0000</phrase><phrase condition="website;enable_sound">

    [Sound]
    File=file://command-failure.ogg</phrase><phrase condition="website;enable_notify">

    [Libnotify]
    Title=${command} failed
    Message=${time}</phrase><phrase condition="website;enable_canberra">

    [Libcanberra]
    Name=command-failure</phrase></phrase></programlisting>
            <para>This configuration will:</para>
            <itemizedlist>
                <listitem><para>relay any event in the <literal>"command"</literal> category to <literal>"myothercomputer.local"</literal></para></listitem>
                <listitem condition="website;enable_notification_daemon"><para>Display a grey (default colour) bubble when a command succeeds, with the <literal>"<replaceable>command</replaceable> succeded"</literal> message and time</para></listitem>
                <listitem condition="website;enable_notification_daemon"><para>Display a red bubble when a command fails, with the <literal>"<replaceable>command</replaceable> failed"</literal> message and time</para></listitem>
                <listitem condition="website;enable_sound"><para>Play the <literal>"<filename>command-success.ogg</filename>"</literal> sound when a command succeeds</para></listitem>
                <listitem condition="website;enable_sound"><para>Play the <literal>"<filename>command-failure.ogg</filename>"</literal> sound when a command fails</para></listitem>
                <listitem condition="website;enable_notify"><para>Display a notification with your favorite notification daemon when a command succeeds, with the <literal>"<replaceable>command</replaceable> succeded"</literal> message and time</para></listitem>
                <listitem condition="website;enable_notify"><para>Display a notification with your favorite notification daemon when a command fails, with the <literal>"<replaceable>command</replaceable> failed"</literal> message and time</para></listitem>
                <listitem condition="website;enable_canberra"><para>Play the <literal>"command-success"</literal> sound when a command succeeds</para></listitem>
                <listitem condition="website;enable_canberra"><para>Play the <literal>"command-failure"</literal> sound when a command fails</para></listitem>
            </itemizedlist>
            <para>You can trigger the event manually using a command like that:</para>
            <programlisting>make; eventc command $([ $? -eq 0 ] &amp;&amp; echo success || echo failure) -d command -c make</programlisting>
            <para>You can also hook your favorite shell to make it automatic. Here are some example for Zshell, Bash or Fish:</para>
            <programlisting>Zshell zshrc:
    precmd() {
        eventc command $([ $? -eq 0 ] &amp;&amp; echo success || echo failure) -d command -c "!!"
    }

Bash bashrc:
    precmd() {
        command=$(history -1)
        [[ -z "${command} ]] &amp;&amp; return
        eventc command $([ $? -eq 0 ] &amp;&amp; echo success || echo failure) -d command -c "${command}"
    }
    # This command is called anytime the prompt is displayed
    # so this may not work perfectly as expected
    PROMPT_COMMAND=precmd

Fish config:
    function notify_on_command_duration --on-variable CMD_DURATION
        eventc command $([ $? -eq 0 ] &amp;&amp; echo success || echo failure) -d command -c "$_" -d time -c "$CMD_DURATION"
    end
            </programlisting>
        </example>

        <example condition="website;enable_notify">
            <title>As a relay to a notification daemon</title>

            <para>
                With its <command>notify</command> plugin, eventd can relay events to a notification daemon.
            </para>
            <para>
                eventd allow a lot of flexibility in events and configuration.
                You can use these features while still having your usual notification daemon to display notifications.
                It may be useful for highly integrated notification daemons.
            </para>
            <para>
                eventd <command>notify</command> plugin also has support for displaying a small icon over the usual notification image.
            </para>
            <para>
                See <citerefentry><refentrytitle>eventd-notify.event</refentrytitle><manvolnum>5</manvolnum></citerefentry> for the <command>notify</command> plugin configuration.
            </para>
        </example>

        <example>
            <title>Relaying remote events: static relay</title>

            <para>
                Using <command>evp</command> and <command>relay</command> plugins, eventd can relay events from a remote computer to your local one.
            </para>
            <para>
                The <command>evp</command> plugin does not require any special configuration in a static setup.
            </para>
            <para>
                The <command>relay</command> plugin will connect to configured servers at startup.
                You can control connections using <command>eventdctl</command> with the following commands:
            </para>
            <programlisting>eventdctl relay connect your.distant.computer
eventdctl relay disconnect your.distant.computer</programlisting>
            <para>
                See <citerefentry><refentrytitle>eventd-relay.event</refentrytitle><manvolnum>5</manvolnum></citerefentry> for the <command>relay</command> plugin configuration.
            </para>
            <para>
                See <citerefentry><refentrytitle>eventdctl</refentrytitle><manvolnum>1</manvolnum></citerefentry> for <command>eventdctl</command> call precisions.
            </para>
        </example>

        <example condition="website;enable_avahi">
            <title>Relaying remote events: Avahi</title>

            <para>
                With Avahi supports, the <command>evp</command> plugin will advertise itself on the network.
            </para>
            <para>
                The <command>relay</command> plugin will connect to configured servers when advertised.
            </para>
        </example>

        <example>
            <title>Relaying remote D-Bus notifications</title>

            <para>
                Combining <command>fdo-notifications</command>, <command>evp</command>, <command>relay</command> and <command>notify</command> plugins, you can easily relay remote D-Bus notifications to your local computer.
            </para>
            <para>
                You need to configure <command>relay</command> and <command>fdo-notifications</command> plugins on the remote computer and <command>evp</command> and <command>notify</command> plugins on the local one.
            </para>
            <para>
                The default provided configurations for the <command>notify</command> plugin is enough on your local computer.
                On the remote one, you will need to configure a relay to your local computer using the <literal>libnotify.event</literal> event id (see <citerefentry><refentrytitle>eventd.event</refentrytitle><manvolnum>5</manvolnum></citerefentry>).
            </para>
        </example>
    </refsect1>

    <refsect1 id="environment">
        <title>Environment</title>

        <variablelist>
            <varlistentry>
                <term><varname>$EVENTD_NO_PLUGINS</varname></term>
                <listitem>
                    <para>If this variable is set, eventd will not load any plugin.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><varname>$EVENTD_PLUGINS_DIR</varname></term>
                <listitem>
                    <para>Additional directory to browse for plugins.</para>
                    <para>This directory is browsed first, before standard directories.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><varname>$EVENTD_PLUGINS_WHITELIST</varname></term>
                <listitem>
                    <para>Comma-separated list of filename prefixes</para>
                    <para>If a plugin does not match (by filename) any prefix, it will not be loaded. If unset, all plugins are allowed.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><varname>$EVENTD_PLUGINS_BLACKLIST</varname></term>
                <listitem>
                    <para>Comma-separated list of filename prefixes</para>
                    <para>If a plugin matches (by filename) any prefix, it will not be loaded. If unset, no plugins are disallowed.</para>
                    <para>This blacklist is tested after the whitelist.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><varname>$EVENTD_CONFIG_DIR</varname></term>
                <listitem>
                    <para>Additional directory to browse for configuration files.</para>
                    <para>This directory is browsed last, after standard directories, and override their files.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>

    <refsect1 id="sockets">
        <title>Sockets</title>

        <variablelist>
            <varlistentry>
                <term><filename><varname>$XDG_RUNTIME_DIR</varname>/&PACKAGE_NAME;/private</filename></term>
                <listitem>
                    <para>Used internally by <citerefentry><refentrytitle>eventdctl</refentrytitle><manvolnum>1</manvolnum></citerefentry> to communicate with eventd. This location can be overridden by the <option>--private-socket</option> option.</para>
                    <para>If <varname>$XDG_RUNTIME_DIR</varname> is not set, we use <varname>$XDG_CACHE_HOME</varname>, with a fallback to <filename>~/.cache</filename>.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>

    <xi:include href="common-man.xml" xpointer="see-also" />
</refentry>
